// Mocks generated by Mockito 5.4.6 from annotations
// in carbon_it_images_search/test/data/repositories/hive_favorites_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hive/hive.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox extends _i1.Mock implements _i2.Box<Map<String, dynamic>> {
  @override
  Iterable<Map<String, dynamic>> get values =>
      (super.noSuchMethod(
            Invocation.getter(#values),
            returnValue: <Map<String, dynamic>>[],
            returnValueForMissingStub: <Map<String, dynamic>>[],
          )
          as Iterable<Map<String, dynamic>>);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i3.dummyValue<String>(this, Invocation.getter(#name)),
            returnValueForMissingStub: _i3.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  bool get isOpen =>
      (super.noSuchMethod(
            Invocation.getter(#isOpen),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get lazy =>
      (super.noSuchMethod(
            Invocation.getter(#lazy),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(
            Invocation.getter(#keys),
            returnValue: <dynamic>[],
            returnValueForMissingStub: <dynamic>[],
          )
          as Iterable<dynamic>);

  @override
  int get length =>
      (super.noSuchMethod(
            Invocation.getter(#length),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isEmpty),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isNotEmpty),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Iterable<Map<String, dynamic>> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#valuesBetween, [], {
              #startKey: startKey,
              #endKey: endKey,
            }),
            returnValue: <Map<String, dynamic>>[],
            returnValueForMissingStub: <Map<String, dynamic>>[],
          )
          as Iterable<Map<String, dynamic>>);

  @override
  Map<String, dynamic>? getAt(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#getAt, [index]),
            returnValueForMissingStub: null,
          )
          as Map<String, dynamic>?);

  @override
  Map<dynamic, Map<String, dynamic>> toMap() =>
      (super.noSuchMethod(
            Invocation.method(#toMap, []),
            returnValue: <dynamic, Map<String, dynamic>>{},
            returnValueForMissingStub: <dynamic, Map<String, dynamic>>{},
          )
          as Map<dynamic, Map<String, dynamic>>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(
    Invocation.method(#keyAt, [index]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Stream<_i2.BoxEvent> watch({dynamic key}) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [], {#key: key}),
            returnValue: _i4.Stream<_i2.BoxEvent>.empty(),
            returnValueForMissingStub: _i4.Stream<_i2.BoxEvent>.empty(),
          )
          as _i4.Stream<_i2.BoxEvent>);

  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Future<void> put(dynamic key, Map<String, dynamic>? value) =>
      (super.noSuchMethod(
            Invocation.method(#put, [key, value]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> putAt(int? index, Map<String, dynamic>? value) =>
      (super.noSuchMethod(
            Invocation.method(#putAt, [index, value]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> putAll(Map<dynamic, Map<String, dynamic>>? entries) =>
      (super.noSuchMethod(
            Invocation.method(#putAll, [entries]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> add(Map<String, dynamic>? value) =>
      (super.noSuchMethod(
            Invocation.method(#add, [value]),
            returnValue: _i4.Future<int>.value(0),
            returnValueForMissingStub: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<Iterable<int>> addAll(Iterable<Map<String, dynamic>>? values) =>
      (super.noSuchMethod(
            Invocation.method(#addAll, [values]),
            returnValue: _i4.Future<Iterable<int>>.value(<int>[]),
            returnValueForMissingStub: _i4.Future<Iterable<int>>.value(<int>[]),
          )
          as _i4.Future<Iterable<int>>);

  @override
  _i4.Future<void> delete(dynamic key) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [key]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAt(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAt, [index]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAll(Iterable<dynamic>? keys) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAll, [keys]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> compact() =>
      (super.noSuchMethod(
            Invocation.method(#compact, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i4.Future<int>.value(0),
            returnValueForMissingStub: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(
            Invocation.method(#deleteFromDisk, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> flush() =>
      (super.noSuchMethod(
            Invocation.method(#flush, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
