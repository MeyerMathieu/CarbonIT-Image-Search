// Mocks generated by Mockito 5.4.6 from annotations
// in carbon_it_images_search/test/presentation/view_models/search_screen_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:carbon_it_images_search/data/entities/image_entity.dart' as _i4;
import 'package:carbon_it_images_search/domain/favorites_repository_result.dart'
    as _i6;
import 'package:carbon_it_images_search/domain/repositories/favorites_repository.dart'
    as _i5;
import 'package:carbon_it_images_search/domain/repositories/images_search_repository.dart'
    as _i2;
import 'package:carbon_it_images_search/presentation/models/image_ui_model.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [ImagesSearchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagesSearchRepository extends _i1.Mock
    implements _i2.ImagesSearchRepository {
  @override
  _i3.Future<List<_i4.ImageEntity>> searchImages({
    required String? search,
    int? page = 1,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchImages, [], {
              #search: search,
              #page: page,
            }),
            returnValue: _i3.Future<List<_i4.ImageEntity>>.value(
              <_i4.ImageEntity>[],
            ),
            returnValueForMissingStub: _i3.Future<List<_i4.ImageEntity>>.value(
              <_i4.ImageEntity>[],
            ),
          )
          as _i3.Future<List<_i4.ImageEntity>>);
}

/// A class which mocks [FavoritesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesRepository extends _i1.Mock
    implements _i5.FavoritesRepository {
  @override
  _i3.Future<_i6.FavoritesRepositoryResult> saveImageToFavorites({
    required _i7.ImageUiModel? imageUiModel,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveImageToFavorites, [], {
              #imageUiModel: imageUiModel,
            }),
            returnValue: _i3.Future<_i6.FavoritesRepositoryResult>.value(
              _i8.dummyValue<_i6.FavoritesRepositoryResult>(
                this,
                Invocation.method(#saveImageToFavorites, [], {
                  #imageUiModel: imageUiModel,
                }),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i6.FavoritesRepositoryResult>.value(
                  _i8.dummyValue<_i6.FavoritesRepositoryResult>(
                    this,
                    Invocation.method(#saveImageToFavorites, [], {
                      #imageUiModel: imageUiModel,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i6.FavoritesRepositoryResult>);

  @override
  _i3.Future<_i6.FavoritesRepositoryResult> removeImageFromFavorites({
    required String? imageId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#removeImageFromFavorites, [], {
              #imageId: imageId,
            }),
            returnValue: _i3.Future<_i6.FavoritesRepositoryResult>.value(
              _i8.dummyValue<_i6.FavoritesRepositoryResult>(
                this,
                Invocation.method(#removeImageFromFavorites, [], {
                  #imageId: imageId,
                }),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i6.FavoritesRepositoryResult>.value(
                  _i8.dummyValue<_i6.FavoritesRepositoryResult>(
                    this,
                    Invocation.method(#removeImageFromFavorites, [], {
                      #imageId: imageId,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i6.FavoritesRepositoryResult>);

  @override
  _i3.Future<List<_i7.ImageUiModel>> getFavorites() =>
      (super.noSuchMethod(
            Invocation.method(#getFavorites, []),
            returnValue: _i3.Future<List<_i7.ImageUiModel>>.value(
              <_i7.ImageUiModel>[],
            ),
            returnValueForMissingStub: _i3.Future<List<_i7.ImageUiModel>>.value(
              <_i7.ImageUiModel>[],
            ),
          )
          as _i3.Future<List<_i7.ImageUiModel>>);

  @override
  _i3.Stream<Set<String>> watchFavoritesIds() =>
      (super.noSuchMethod(
            Invocation.method(#watchFavoritesIds, []),
            returnValue: _i3.Stream<Set<String>>.empty(),
            returnValueForMissingStub: _i3.Stream<Set<String>>.empty(),
          )
          as _i3.Stream<Set<String>>);
}
